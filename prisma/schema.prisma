generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "foreignKeys"
}

model Product {
  id                     String                 @id @default(uuid())
  name                   String
  author                 String
  priceInCents           Int
  filePath               String
  imagePath              String
  description            String
  category               String
  length                 Int
  isAvailableForPurchase Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  reviews                Review[]
  orders                 Order[]
  downloadVerifications  DownloadVerification[]
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  username       String          @unique
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orders         Order[]
  passwordResets PasswordReset[]
  reviews        Review[]
}

model Order {
  id           String   @id @default(uuid())
  priceInCents Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userid    String
  productid String

  user    User    @relation(fields: [userid], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productid], references: [id], onDelete: Restrict)
}

model Review {
  id        String   @id @default(uuid())
  productid String
  userid    String
  headline  String?  // Make headline optional
  text      String?  // Make text optional
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int

  product   Product  @relation(fields: [productid], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userid], references: [id], onDelete: Cascade)
}


model DownloadVerification {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  productid String

  product   Product  @relation(fields: [productid], references: [id], onDelete: Cascade)
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}
